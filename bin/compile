#!/usr/bin/env bash

ROOT_BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

for BUILDPACK in $(cat ${ROOT_BUILD_DIR}/.buildDirectories); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  directory=${BUILDPACK%=*}
  urlBranch=${BUILDPACK#*=}
  url=${urlBranch%#*}
  branch=${urlBranch#*#}
  cacheDir=${CACHE_DIR}/${directory}
  buildDir=${ROOT_BUILD_DIR}/${directory}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$directory" == "root" ]; then
    buildDir=${ROOT_BUILD_DIR}
  fi

#  echo directory:${directory}
#  echo url:${url}
#  echo branch:${branch}
#  echo cache:${cacheDir}
#  echo build:${buildDir}

  mkdir -p ${cacheDir}

  if [ "$url" != "" ]; then
    echo "=====> Running buildpack in directory: $directory"
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect ${buildDir})

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile ${buildDir} ${cacheDir} ${ENV_DIR}

      if [ $? != 0 ]; then
        exit 1
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release ${buildDir} > ${ROOT_BUILD_DIR}/last_pack_release.out
      fi
    fi
  fi
  echo
done

if [ -e ${ROOT_BUILD_DIR}/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi
